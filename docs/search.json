[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Nushell: installarlo con il supporto ai dataframe\n\n\n\n\n\n\n\nnushell\n\n\ndataframe\n\n\ncli\n\n\ntil\n\n\n\n\nA partire dal codice sorgente\n\n\n\n\n\n\n3 dic 2022\n\n\nAndrea Borruso\n\n\n\n\n\n\n\n\nDuckDB: creare un file parquet a partire da un CSV\n\n\n\n\n\n\n\nduckdb\n\n\ncsv\n\n\ntil\n\n\nparquet\n\n\ncli\n\n\n\n\nCome farlo a riga di comando\n\n\n\n\n\n\n28 nov 2022\n\n\nAndrea Borruso\n\n\n\n\n\n\n\n\nQuarto: renderizzare una tabella a partire da un CSV\n\n\n\n\n\n\n\nquarto\n\n\ncsv\n\n\ntil\n\n\nrstats\n\n\n\n\nCome farlo con il kernel R\n\n\n\n\n\n\n26 nov 2022\n\n\nAndrea Borruso\n\n\n\n\n\n\n\n\nFare convivere una cella Observable e un grafico Altair in Quarto\n\n\n\n\n\n\n\nquarto\n\n\naltair\n\n\ngrafici\n\n\nobservable\n\n\ntil\n\n\n\n\n\n\n\n\n\n\n\n22 nov 2022\n\n\nAndrea Borruso\n\n\n\n\n\n\n\n\nQuarto: leggere un CSV via Obeservable e visualizzare i dati\n\n\n\n\n\n\n\nquarto\n\n\ncsv\n\n\nobservable\n\n\ntil\n\n\n\n\n\n\n\n\n\n\n\n21 nov 2022\n\n\nAndrea Borruso\n\n\n\n\n\n\n\n\nCome filtrare un file di testo a partire da una lista di stringhe\n\n\n\n\n\n\n\ncli\n\n\ntil\n\n\ngrep\n\n\n\n\nCome usare grep, ripgrep e qsv per applicare un filtro a partire da un file esterno\n\n\n\n\n\n\n20 nov 2022\n\n\nAndrea Borruso\n\n\n\n\n\n\n\n\nIl mio primo blog post\n\n\n\n\n\n\n\nquarto\n\n\ntil\n\n\ngithub\n\n\n\n\nÈ un mini post, in cui racconto i miei primi passi con un sito in quarto\n\n\n\n\n\n\n19 nov 2022\n\n\nAndrea Borruso\n\n\n\n\n\n\nNessun risultato"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Andrea Borruso",
    "section": "",
    "text": "Ciao\nGrazie per essere qui. Questo è uno spazio dove inserirò alcuni appunti sulle cose che imparo, sui progetti che mi piacciono e/o che sto facendo, sugli strumenti con cui lavoro e gioco e sulle persone che incontro.\nSono socio dell’associazione onData.\n\n\nQuando hai dato lo stesso consiglio 3 volte, scrivi un post (David Robinson)."
  },
  {
    "objectID": "til.html",
    "href": "til.html",
    "title": "TIL (Today I Learned)",
    "section": "",
    "text": "Che vuol dire TIL?\n\n\n\nMi piacciono molto le persone che usano il loro sito web, per appuntarsi alcune delle cose che imparano. Come fa il mitico Simon Willison. E Simon lo fa in modalità TIL, ovvero Today I Learned.\nI miei qui, saranno spesso post “piccoli”, in forma di appunti, con qualche probabile bruttura di stile.\n\n\n\n\n\n\n\n\n   \n     \n     \n       Ordinare per\n       Predefinito\n         \n          Data - Meno recente\n        \n         \n          Data - Più recente\n        \n         \n          Titolo\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nData\n\n\nTitolo\n\n\n\n\n\n\n3 dic 2022\n\n\nNushell: installarlo con il supporto ai dataframe\n\n\n\n\n28 nov 2022\n\n\nDuckDB: creare un file parquet a partire da un CSV\n\n\n\n\n26 nov 2022\n\n\nQuarto: renderizzare una tabella a partire da un CSV\n\n\n\n\n22 nov 2022\n\n\nFare convivere una cella Observable e un grafico Altair in Quarto\n\n\n\n\n21 nov 2022\n\n\nQuarto: leggere un CSV via Obeservable e visualizzare i dati\n\n\n\n\n20 nov 2022\n\n\nCome filtrare un file di testo a partire da una lista di stringhe\n\n\n\n\n19 nov 2022\n\n\nIl mio primo blog post\n\n\n\n\n\n\nNessun risultato"
  },
  {
    "objectID": "til/duckdb-creare-parquet-csv/index.html",
    "href": "til/duckdb-creare-parquet-csv/index.html",
    "title": "DuckDB: creare un file parquet a partire da un CSV",
    "section": "",
    "text": "DuckDB ha una cli molto comoda e potente.\nSe si vuole ad esempio creare il file parquet del file CSV degli Indicatori di rischio idrogeologico pubblicati da ISPRA, questo è il comando da lanciare:\nduckdb -c \"CREATE TABLE comuni_pir AS SELECT * FROM comuni_pir.csv;EXPORT DATABASE '.' (FORMAT PARQUET);\"\n\nviene creata una tabella comuni_pir in un db temporaneo, a partire dal file CSV;\nviene esportato il db in formato parquet (che conterrà una sola tabella), nella directory corrente;\n-c per eseguire i due comandi, separati da ; e poi uscire.\n\n\n\n\n\n\n\nAttenzione all’inferencing dei tipi di campo\n\n\n\nI campi di un file CSV non sono associati a una definizione di tipo di campo. DuckDB in import farà il cosiddetto inferencing, ovvero proverà a dedurlo.Non è detto che lo faccia correttamente ed è bene sempre fare un check (celle con valori come 08, 09, ecc. sono ad esempio spesso mappate come numeri e non come stringhe)."
  },
  {
    "objectID": "til/filtrare-file-elenco-file-esterno/index.html",
    "href": "til/filtrare-file-elenco-file-esterno/index.html",
    "title": "Come filtrare un file di testo a partire da una lista di stringhe",
    "section": "",
    "text": "Avevo bisogno di filtrare un file CSV di grandi dimensioni, compresso in zip, a partire da una lista di stringhe contenute in un file. Dato il CSV, volevo estrarne soltanto le righe che contenevano una delle stringhe presenti nel file esterno.\nVia CLI, usando lo straordinario grep il comando è (list.txt, è il file che contiene per ogni riga la stringa da cercare):\nunzip -qq -c \"input.zip\"  | grep -F -f list.txt\nPer me questa modalità ha risolto tutto. Ma ne metto un paio di altre.\nUna è basata su ripgrep, un’altra straordinaria CLI per la ricerca di testo, più rapida di grep:\nunzip -qq -c \"input.zip\"  | rg -F -f list.txt\n\n\n\n\n\n\nNon si tiene conto del formato\n\n\n\nQueste due modalità non tengono però conto del formato CSV, non riescono ad esempio a cercare per colonna, ma solo per riga. Sotto una soluzione che riesce a farlo.\n\n\nCon qsv, è possibile ricercare per colonna:\nunzip -qq -c \"input.zip\"  | qsv searchset -d \"|\" -i -s nomeColonna list.txt\n\n\n\n\n\n\nNota\n\n\n\n\n-d \"|\" per impostare il separatore di colonna del CSV;\n-i per ignorare maiuscole e minuscole;\n-s nomeColonna per specificare la colonna in cui cercare."
  },
  {
    "objectID": "til/nushell-installare-supporto-dataframe/index.html",
    "href": "til/nushell-installare-supporto-dataframe/index.html",
    "title": "Nushell: installarlo con il supporto ai dataframe",
    "section": "",
    "text": "Dalla release 0.72 di nushell il supporto ai dataframe non è abilitato di default.\nQuesta una modalità di compilarlo, con il supporto abilitato.\n# clona il repository\ngit clone https://github.com/nushell/nushell.git\n\ncd nushell\n\ncargo install --path=. --all-features\nVerrà installato in /home/username/.cargo/bin/nu."
  },
  {
    "objectID": "til/quarto-mescolare-observable-altair/index.html",
    "href": "til/quarto-mescolare-observable-altair/index.html",
    "title": "Fare convivere una cella Observable e un grafico Altair in Quarto",
    "section": "",
    "text": "Non è possibile in Quarto fare convivere una cella di codice di tipo Observable, con una cella Python con un grafico Altair.\n\n\nVedi issue 3424\nC’è però un workaround:\n\nda Altair generare la descrizione del grafico in formato JSON (è in formato vega-lite), con chart.to_json();\nfare leggere a una cella Observable il JSON, e visualizzare il grafico.\n\nQui ad esempio creo una cella Observable usata soltanto come esempio.\n\n```{ojs}\n//| echo: fenced\ndata = FileAttachment(\"ojs.csv\").csv({ typed: true })\nInputs.table(data)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPoi genero la descrizione di un grafico vega-lite, con Altair, salvando il file chart.json.\n\n```{python}\nimport pandas as pd\nimport altair as alt\nimport warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\ndf = pd.read_csv(\"altair.csv\",keep_default_na=False)\n\ndf['year'] = pd.to_datetime(df['year'], format='%Y')\n\nchart=alt.Chart(df).mark_area().encode(\n    alt.X('year:T', timeUnit = 'year',title='year',axis=alt.Axis(tickCount='year')),\n    alt.Y('v:Q',axis=alt.Axis(format='%'),title='percentage'),\n    color='i:N'\n)\nchart.save('chart.json')\n```\n\nE infine faccio leggere a Observable la descrizione del grafico, che è stata generata da Altair e lo faccio visualizzare.\n\n```{ojs}\n//| echo: fenced\nfile = FileAttachment(\"chart.json\").json()\nembed = require(\"vega-embed@6\")\nembed(file)\n```"
  },
  {
    "objectID": "til/quarto-renderizzare-tabelle-r/index.html",
    "href": "til/quarto-renderizzare-tabelle-r/index.html",
    "title": "Quarto: renderizzare una tabella a partire da un CSV",
    "section": "",
    "text": "Per prima cosa carico delle librerie per leggere il CSV e per renderizzare la tabella, e carico la tabella:\n```{r}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(knitr)\n\nt = read_csv(\"input.csv\")\n```\n\n\n\nE poi le renderizzo in vari modi.\n\n```{r}\nkable(t)\n```\n\n\n\n\nyear\ni\nv\n\n\n\n\n2016\nF\n0.9599717\n\n\n2016\nG\n0.0382419\n\n\n2016\nNA\n0.0012658\n\n\n2016\nW\n0.0000122\n\n\n2016\nS\n0.0000454\n\n\n2016\nO\n0.0004631\n\n\n2017\nF\n0.9598036\n\n\n2017\nG\n0.0384042\n\n\n2017\nC\n0.0012674\n\n\n2017\nW\n0.0000153\n\n\n2017\nS\n0.0000486\n\n\n2017\nO\n0.0004608\n\n\n2018\nF\n0.9598013\n\n\n\n\n\n\n```{r}\n#| tbl-cap: \"Soltanto le prime righe\"\nkable(head(t))\n```\n\n\nSoltanto le prime righe \n\n\nyear\ni\nv\n\n\n\n\n2016\nF\n0.9599717\n\n\n2016\nG\n0.0382419\n\n\n2016\nNA\n0.0012658\n\n\n2016\nW\n0.0000122\n\n\n2016\nS\n0.0000454\n\n\n2016\nO\n0.0004631\n\n\n\n\n\n\n```{r}\n#| tbl-cap: \"Selezionare righe e colonne\"\nkable(t[1:4, 1:2])\n```\n\n\nSelezionare righe e colonne \n\n\nyear\ni\n\n\n\n\n2016\nF\n\n\n2016\nG\n\n\n2016\nNA\n\n\n2016\nW\n\n\n\n\n\n\n```{r}\n#| tbl-cap: \"Paginazione\"\n\nrmarkdown::paged_table(t)\n```\n\n\n Paginazione"
  },
  {
    "objectID": "til/renderizzare-csv-quarto-observable/index.html",
    "href": "til/renderizzare-csv-quarto-observable/index.html",
    "title": "Quarto: leggere un CSV via Obeservable e visualizzare i dati",
    "section": "",
    "text": "Si può usare semplicemente il metodo FileAttachment di Observable, per data.csv\n```{ojs}\ndata = FileAttachment(\"data.csv\").csv({ typed: true })\nInputs.table(data)\n```\nper ottenere\n\ndata = FileAttachment(\"data.csv\").csv({ typed: true })\nInputs.table(data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nO in alternativa con arquero (ma vale la pena usarlo anche per trasformare i dati)\n\n```{ojs}\n//| echo: fenced\nimport { aq, op } from '@uwdata/arquero'\ndati_aquero = aq.loadCSV(\"data.csv\")\n\ndati_aquero.view()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNota\n\n\n\nIl Quarto del titolo è lui https://quarto.org/"
  },
  {
    "objectID": "til/un-sito-in-quarto/index.html",
    "href": "til/un-sito-in-quarto/index.html",
    "title": "Il mio primo blog post",
    "section": "",
    "text": "Uso quarto da diverse settimane per creare slide in HTML scritte in markdown e basate su reveal.js.\nQuarto è un sistema di pubblicazione scientifica e tecnica, open source, basato su Pandoc:\n\nCrea contenuti dinamici con Python, R, Julia e Observable;\nI documenti sono o file markdown in plain text o Jupyter notebook;\nConsente di pubblicare articoli, report, presentazioni, siti Web, blog e libri di alta qualità in HTML, PDF, MS Word, ePub e altri formati;\nConsente di creare contenuti utilizzando scientific markdown, incluse equazioni, citazioni, riferimenti incrociati, pannelli di immagini, didascalie, layout avanzato e altro ancora.\n\nQuello che ho fatto per creare la prima versione di questo sito è stato:\n\nInstallare quarto;\ncreare un nuovo progetto, dandogli per nome il mio profilo utente GitHub;\n\nquarto create-project aborruso.github.io --type website\n\nimpostare a docs la cartella di output di pubblicazione del sito, aggiungendo l’istruzione nel file _quarto.yml:\n\n\n\n_quarto.yml\n\nproject:\n  type: website\n  output-dir: docs\n\n\ncreare dei primi contenuti da pubblicare come questo post;\ncreare il repo aborruso.github.io su GitHub;\ngenerare il sito con il comando render\n\nquarto render ./\n\nimpostare come sorgente delle GitHub Pages del repo creato, la cartella docs citata sopra;\npubblicare tutto su GitHub.\n\nPer farlo, mi hanno aiutato queste letture:\n\nCreating your personal website using Quarto https://ucsb-meds.github.io/creating-quarto-websites/\nCreating a Website (dal sito ufficiale) https://quarto.org/docs/websites/\nCreating a Blog (dal sito ufficiale) https://quarto.org/docs/websites/website-blog.html\n\n\n\n\n\n\n\nImportante\n\n\n\nHo seguito questi step per la primissima pubblicazione, per vedere subito un primo risultato. Poi ho cambiato molte cose, quindi le impostazioni attuali sono diverse da quelle descritte sopra."
  }
]